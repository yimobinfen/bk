<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何快速提升coding能力</title>
      <link href="/bk/2020/08/14/wo-de-di-yi-pian-wen-zhang/"/>
      <url>/bk/2020/08/14/wo-de-di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信很多初学编程的朋友都有这样的苦恼：为什么我感觉自己基础都掌握了，但是学校的课程结束后再进行编程时还是什么都不会呢？</p></blockquote><h6 id="通常新手程序员会以不同的方式来表达这个疑问"><a href="#通常新手程序员会以不同的方式来表达这个疑问" class="headerlink" title="通常新手程序员会以不同的方式来表达这个疑问"></a>通常新手程序员会以不同的方式来表达这个疑问</h6><p>比如：</p><ol><li>“我通过在线课程学习了Python，但是我还是不知道怎么用它来编程。”</li><li>“我知道这个理论，可是怎么把它运用到我的代码里啊？”</li><li>“我知道while循环，但我就是不知道何时何地使用它们。”</li><li>“循环数组变量我都知道，然而我不知道如何将他们组合起来。”</li></ol><h4 id="现在在我们来客观的谈一谈这个问题。"><a href="#现在在我们来客观的谈一谈这个问题。" class="headerlink" title="现在在我们来客观的谈一谈这个问题。"></a>现在在我们来客观的谈一谈这个问题。</h4><p>    首先要说的是，如果你觉得自己基础都掌握了，但是就是不能在没有他人指导的情况下写出一个程序，那么我只能说你<strong>并没有真正掌握这些基础知识。</strong><br>我能理解你面对这一情况内心的沮丧，但是你要知道这是成为一名优秀程序员<strong>必经</strong>的一个阶段，所以即使你有千百个不愿意也不得不面对这个现实。<br>接下来我们就来探讨一下，为什么那么多学生会在上完编程课程后不能“顺利出师”，并会针对这个问题给大家一些小建议，希望能助你在优秀程序员的路上越走越远。  </p><h6 id="一、造成这一问题的原因"><a href="#一、造成这一问题的原因" class="headerlink" title="一、造成这一问题的原因"></a>一、造成这一问题的原因</h6><p><strong>1.“人造”的编程环境</strong><br>    造成这个问题的一大因素是在线编码课程为学生提供了一个“人造”的编程环境，在这个“人造”的编程环境中学生们通常都会在一个已经<strong>包含了指令和提示的网页上练习代码</strong>。<br>    然而这并不是编程真正的打开方式。所以课程结束后，<strong>当没有人再为学生提供这样一个“虚假”“舒适”的编程环境时，面对真正的编程环境，学生们就开始不知所措，失去了目标和方向。</strong><br>    当然，在线课程提供这种“人造”的编程环境并不是全然不好的。<strong>因为建立一个真正的编程环境通常是很复杂并且在真正的编程环境里进行编程会让初学者感到沮丧。而在线课程提供的这种“人造”的编程环境允许你不用建立起自己的编程环境就可以获得许多编程经验。</strong>然而，这种“舒适的”编程环境虽然在一定程度上减轻了你在初学编程阶段的挫折苦痛，但是它也只是将学习编程的挫折苦痛拦截到课程结束后，等课程一结束，它们就会出现在你面前。<br><strong>2.过度的指导</strong><br>    当你结束了一个在线课程，或是学习完一本书，或是在现实编程中接受他人建议时，你都能从中得到很多的提示和指导。在这种情况下，你甚至可以在刚拿到一个程序时就能知道你要输入什么甚至知道这个程序的最终结果。<br>    然而当你试图自己建立一个项目的时候，你只能看到一片空白的输入框：没有指令、没有提示、更没有人告诉你下一行要输入什么。<strong>像这样从一个简单的环境跳到一个困难的环境</strong>，你自然会感到惊慌失措甚至自我怀疑。<br>    接受过度指导的另一个后果是：<strong>学习了语法但没有学习到编程的概念</strong>。<br>    语法就是你输入的特定编程语言的文本，比如if和while。但是每种语言的语法都是不尽相同的，而你在学习编程时，不只是要学习编程语言的语法，更<strong>重要</strong>的是要学习他们的概念，比如<strong>分支和迭代</strong>。<br>    <strong>了解概念能让你理解代码实际上能做成什么，以及代码如何用不同的语言实现。</strong><br>    所以如果有人说他们知道while循环，但是不知道何时何地使用它的话，那他们肯定还没有真正理解<strong>迭代</strong>的概念。<br>    但是，我并没有说接受指导是不好的。因为当你刚开始学习的时候，你肯定需要有人来指点迷津。如果完完全全自学没有接收到任何建议指导的话，你可能会像一只无头苍蝇一样在编程世界里盲目飞行。<br>    而在你的编程生涯的每个阶段，你也都需要有人来指导你，但是一定不要接受过多的指导。因为作为初学者，如果接受了过多的指导就会给你一个错觉：<strong>编程很简单</strong>。这就会造成当你不能成功地独自写出程序时，对自己的编程人生感到怀疑。   </p><h6 id="二、如何解决这个问题"><a href="#二、如何解决这个问题" class="headerlink" title="二、如何解决这个问题"></a>二、如何解决这个问题</h6><p><strong>1.创建一个真正的编程环境</strong><br>    每种编程语言需要的编程环境都是不同的。<br>    想要创建一个真正的编程环境，首先，你需要一个文本编辑器或一个IDE（集成开发环境）。然后你需要找出对你正在学习的语言来说最适合的编辑器并安装它。<br>    其次，你需要知道<strong>如何创建并运行一个包含代码的文件。</strong><br>    如果你是使用一个IDE来作为你的文本编辑器，例如：Visual Studio、Xcode或Eclipse，那么这个功能就会被构建到IDE中。你就需要了解如何创建一个新项目以及需要点击什么按钮来运行代码。<br>    但是如果你没有使用IDE，那么你可能就需要学习如何利用命令行来运行代码。你可以找一些入门指导或者上YouTube看一些免费的教学视频来学习使用命令行。<br>    最后，一旦你可以编写代码，并且能够正常运行程序，那么基本上你就开始正式步入专业程序员的道路了。<br><strong>2.从刷算法题开始，疯狂积累代码量</strong><br>    当你还是一个新手的时候，你需要疯狂的积累你的代码量，你可以从基本的问题出发，做一些简单的问题，怎么输入数据，怎么输出数据，然后熟悉各种数据结构，各种常见算法，疯狂的刷题。<br>    比如，lintcode 就是一个很不错的刷题网站。不会怎么办！看答案。推荐在这里对照查看lintcode算法题的答案：<a href="http://www.jiuzhang.com/solution/">http://www.jiuzhang.com/solution/</a> 。先了解答案是怎么写的，然后自己实现一遍。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
